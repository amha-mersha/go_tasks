// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/amha-mersha/go_tasks/test-go-backend-task-manager/domains"
	mock "github.com/stretchr/testify/mock"
)

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: cxt, newUser
func (_m *UserUsecase) CreateUser(cxt context.Context, newUser domain.User) (string, *domain.UserError) {
	ret := _m.Called(cxt, newUser)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 string
	var r1 *domain.UserError
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) (string, *domain.UserError)); ok {
		return rf(cxt, newUser)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) string); ok {
		r0 = rf(cxt, newUser)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.User) *domain.UserError); ok {
		r1 = rf(cxt, newUser)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.UserError)
		}
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: cxt, authority, deleteID
func (_m *UserUsecase) DeleteUser(cxt context.Context, authority domain.User, deleteID string) (domain.User, *domain.UserError) {
	ret := _m.Called(cxt, authority, deleteID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 domain.User
	var r1 *domain.UserError
	if rf, ok := ret.Get(0).(func(context.Context, domain.User, string) (domain.User, *domain.UserError)); ok {
		return rf(cxt, authority, deleteID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.User, string) domain.User); ok {
		r0 = rf(cxt, authority, deleteID)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.User, string) *domain.UserError); ok {
		r1 = rf(cxt, authority, deleteID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.UserError)
		}
	}

	return r0, r1
}

// GetAllUser provides a mock function with given fields: cxt
func (_m *UserUsecase) GetAllUser(cxt context.Context) ([]domain.User, *domain.UserError) {
	ret := _m.Called(cxt)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUser")
	}

	var r0 []domain.User
	var r1 *domain.UserError
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.User, *domain.UserError)); ok {
		return rf(cxt)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.User); ok {
		r0 = rf(cxt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) *domain.UserError); ok {
		r1 = rf(cxt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.UserError)
		}
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: cxt, userID
func (_m *UserUsecase) GetUserByID(cxt context.Context, userID string) (domain.User, *domain.UserError) {
	ret := _m.Called(cxt, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 domain.User
	var r1 *domain.UserError
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.User, *domain.UserError)); ok {
		return rf(cxt, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.User); ok {
		r0 = rf(cxt, userID)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *domain.UserError); ok {
		r1 = rf(cxt, userID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.UserError)
		}
	}

	return r0, r1
}

// GetUserByUsername provides a mock function with given fields: cxt, username
func (_m *UserUsecase) GetUserByUsername(cxt context.Context, username string) (domain.User, *domain.UserError) {
	ret := _m.Called(cxt, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 domain.User
	var r1 *domain.UserError
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.User, *domain.UserError)); ok {
		return rf(cxt, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.User); ok {
		r0 = rf(cxt, username)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *domain.UserError); ok {
		r1 = rf(cxt, username)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.UserError)
		}
	}

	return r0, r1
}

// LoginUser provides a mock function with given fields: cxt, loggingUser
func (_m *UserUsecase) LoginUser(cxt context.Context, loggingUser domain.User) (string, *domain.UserError) {
	ret := _m.Called(cxt, loggingUser)

	if len(ret) == 0 {
		panic("no return value specified for LoginUser")
	}

	var r0 string
	var r1 *domain.UserError
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) (string, *domain.UserError)); ok {
		return rf(cxt, loggingUser)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) string); ok {
		r0 = rf(cxt, loggingUser)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.User) *domain.UserError); ok {
		r1 = rf(cxt, loggingUser)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.UserError)
		}
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: cxt, userUpdate
func (_m *UserUsecase) UpdateUser(cxt context.Context, userUpdate domain.User) (domain.User, *domain.UserError) {
	ret := _m.Called(cxt, userUpdate)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 domain.User
	var r1 *domain.UserError
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) (domain.User, *domain.UserError)); ok {
		return rf(cxt, userUpdate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) domain.User); ok {
		r0 = rf(cxt, userUpdate)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.User) *domain.UserError); ok {
		r1 = rf(cxt, userUpdate)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.UserError)
		}
	}

	return r0, r1
}

// NewUserUsecase creates a new instance of UserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUsecase {
	mock := &UserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
