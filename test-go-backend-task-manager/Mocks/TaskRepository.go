// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/amha-mersha/go_tasks/test-go-backend-task-manager/domains"
	mock "github.com/stretchr/testify/mock"
)

// TaskRepository is an autogenerated mock type for the TaskRepository type
type TaskRepository struct {
	mock.Mock
}

// CreateTask provides a mock function with given fields: cxt, newTask
func (_m *TaskRepository) CreateTask(cxt context.Context, newTask domain.Task) (string, *domain.TaskError) {
	ret := _m.Called(cxt, newTask)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 string
	var r1 *domain.TaskError
	if rf, ok := ret.Get(0).(func(context.Context, domain.Task) (string, *domain.TaskError)); ok {
		return rf(cxt, newTask)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Task) string); ok {
		r0 = rf(cxt, newTask)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Task) *domain.TaskError); ok {
		r1 = rf(cxt, newTask)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.TaskError)
		}
	}

	return r0, r1
}

// DeleteTask provides a mock function with given fields: cxt, taskID
func (_m *TaskRepository) DeleteTask(cxt context.Context, taskID string) (domain.Task, *domain.TaskError) {
	ret := _m.Called(cxt, taskID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 domain.Task
	var r1 *domain.TaskError
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.Task, *domain.TaskError)); ok {
		return rf(cxt, taskID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Task); ok {
		r0 = rf(cxt, taskID)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *domain.TaskError); ok {
		r1 = rf(cxt, taskID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.TaskError)
		}
	}

	return r0, r1
}

// FetchAllTasks provides a mock function with given fields: cxt
func (_m *TaskRepository) FetchAllTasks(cxt context.Context) ([]domain.Task, *domain.TaskError) {
	ret := _m.Called(cxt)

	if len(ret) == 0 {
		panic("no return value specified for FetchAllTasks")
	}

	var r0 []domain.Task
	var r1 *domain.TaskError
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.Task, *domain.TaskError)); ok {
		return rf(cxt)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Task); ok {
		r0 = rf(cxt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) *domain.TaskError); ok {
		r1 = rf(cxt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.TaskError)
		}
	}

	return r0, r1
}

// FetchTaskByID provides a mock function with given fields: cxt, ID
func (_m *TaskRepository) FetchTaskByID(cxt context.Context, ID string) (domain.Task, *domain.TaskError) {
	ret := _m.Called(cxt, ID)

	if len(ret) == 0 {
		panic("no return value specified for FetchTaskByID")
	}

	var r0 domain.Task
	var r1 *domain.TaskError
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.Task, *domain.TaskError)); ok {
		return rf(cxt, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Task); ok {
		r0 = rf(cxt, ID)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *domain.TaskError); ok {
		r1 = rf(cxt, ID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.TaskError)
		}
	}

	return r0, r1
}

// UpdateTask provides a mock function with given fields: cxt, updateTask
func (_m *TaskRepository) UpdateTask(cxt context.Context, updateTask domain.Task) (domain.Task, *domain.TaskError) {
	ret := _m.Called(cxt, updateTask)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 domain.Task
	var r1 *domain.TaskError
	if rf, ok := ret.Get(0).(func(context.Context, domain.Task) (domain.Task, *domain.TaskError)); ok {
		return rf(cxt, updateTask)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Task) domain.Task); ok {
		r0 = rf(cxt, updateTask)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Task) *domain.TaskError); ok {
		r1 = rf(cxt, updateTask)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.TaskError)
		}
	}

	return r0, r1
}

// NewTaskRepository creates a new instance of TaskRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskRepository {
	mock := &TaskRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
